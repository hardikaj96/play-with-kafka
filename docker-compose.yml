version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: "2181"  
    networks:
      - confluent

  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      ZOOKEEPER_CLIENT_PORT: "2181"  
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1  
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      
    networks:
      - confluent
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server=kafka:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 3
    command: ["/etc/confluent/docker/run"]

  # kafka2:
  #  image: confluentinc/cp-kafka:latest
  #  depends_on:
  #    - zookeeper
  #  ports:
  #    - "9093:9092"
  #  environment:
  #    KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #    KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka2:9092"
  #    ZOOKEEPER_CLIENT_PORT: "2181" 
  #    KAFKA_DEFAULT_REPLICATION_FACTOR: 1 
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #  networks:
  #    - confluent
  #  healthcheck:
  #     test: ["CMD", "kafka-topics", "--bootstrap-server=kafka2:9092", "--list"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #  command: ["/etc/confluent/docker/run"]

  # kafka3:
  #  image: confluentinc/cp-kafka:latest
  #  depends_on:
  #    - zookeeper
  #  ports:
  #    - "9094:9092"
  #  environment:
  #    KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
  #    KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka3:9092"
  #    ZOOKEEPER_CLIENT_PORT: "2181" 
  #    KAFKA_DEFAULT_REPLICATION_FACTOR: 1 
  #    KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #  networks:
  #    - confluent
  #  healthcheck:
  #     test: ["CMD", "kafka-topics", "--bootstrap-server=kafka3:9092", "--list"]
  #     interval: 5s
  #     timeout: 5s
  #     retries: 3
  #  command: ["/etc/confluent/docker/run"]

  zookeeper1:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: "2182"  
    networks:
      - confluent

  kafka4:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper1
    ports:
      - "9095:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper1:2182"
      KAFKA_ADVERTISED_LISTENERS: "PLAINTEXT://kafka4:9092"
      ZOOKEEPER_CLIENT_PORT: "2182"  
      KAFKA_DEFAULT_REPLICATION_FACTOR: 1  
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - confluent
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server=kafka4:9092", "--list"]
      interval: 5s
      timeout: 5s
      retries: 3
    command: ["/etc/confluent/docker/run"]

  control-center:
   image: confluentinc/cp-enterprise-control-center:latest
   depends_on:
     - kafka
    #  - kafka2
    #  - kafka3
     - kafka4
   ports:
     - 9021:9021
   environment:
    #  CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092,kafka2:9093,kafka3:9094,kafka4:9095
     CONTROL_CENTER_BOOTSTRAP_SERVERS: kafka:9092,kafka4:9092
    #  CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181,zookeeper1:2182
     CONTROL_CENTER_ZOOKEEPER_CONNECT: zookeeper:2181,zookeeper1:2182
     CONTROL_CENTER_REPLICATION_FACTOR: 1
   networks:
      - confluent


  mongo:
    image: mongo:4.4
    networks:
      - confluent
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: db
      MONGO_INITDB_SCRIPT: /docker-entrypoint-initdb.d/init.js
    ports:
      - "27017:27017"
    volumes:
      - ./init.js:/docker-entrypoint-initdb.d/init.js
    healthcheck:
      test: ["CMD", "mongo", "admin", "--eval", "db.runCommand({ping:1})"]
      interval: 5s
      timeout: 5s
      retries: 3

  flask-app:
    build:
      context: flask-app
      dockerfile: Dockerfile
    ports:
      - "5002:5002"
    depends_on:
      - mongo
    networks:
      - confluent
    volumes:
      - ./flask-app:/app
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://flask-app:5002/health"]
      interval: 5s
      timeout: 5s
      retries: 3
  
  kafka-scripts:
    image: python:3.8
    networks:
      - confluent
    volumes:
      - ./scripts:/app
    working_dir: /app
    command: bash -c "pip install confluent_kafka pymongo faker && tail -f /dev/null"
    depends_on:
      - kafka
      - kafka2
      - kafka3
      - mongo

networks:
  confluent:
